<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nsync</name>
    </assembly>
    <members>
        <member name="T:nsync.SettingsPage">
            <summary>
            Interaction logic for SettingsPage.xaml
            </summary>
            <summary>
            SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.#ctor">
            <summary>
            Constructor for SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.CheckSettings">
            <summary>
            Update the checkbox on SettingsPage
            </summary>
        </member>
        <member name="M:nsync.SettingsPage.CheckboxToggleHelperWindow_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user checks the checkbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SettingsPage.CheckboxToggleHelperWindow_UnChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user unchecks the checkbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SettingsPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.bothFoldersNotExist">
            <summary>
              Looks up a localized string similar to Both the selected folders do not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.closeToolTip">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderExplorerText">
            <summary>
              Looks up a localized string similar to Select a folder to synchronise with nsync..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/folder.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.folderMissingIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/folder_missing.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.homeToolTip">
            <summary>
              Looks up a localized string similar to Home.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.insufficientDiskSpace">
            <summary>
              Looks up a localized string similar to Insufficient disk space.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.leftFolderNotExist">
            <summary>
              Looks up a localized string similar to The left folder does not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.minimiseToolTip">
            <summary>
              Looks up a localized string similar to Minimise.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.nullString">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.panelIconToolTip">
            <summary>
              Looks up a localized string similar to Drag or Click to Add a Folder.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.panelText">
            <summary>
              Looks up a localized string similar to Drag &amp; Drop Folders Here.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.rightFolderNotExist">
            <summary>
              Looks up a localized string similar to The right folder does not exist..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.settingsFilePath">
            <summary>
              Looks up a localized string similar to /settings.xml.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.settingsToolTip">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.similarFolders">
            <summary>
              Looks up a localized string similar to The left and right folders cannot be similar..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.subfolderOfFolder">
            <summary>
              Looks up a localized string similar to Folders that are to be synchronized cannot be a subfolder of each other..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.syncButtonToolTip">
            <summary>
              Looks up a localized string similar to And Sync!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.syncComplete">
            <summary>
              Looks up a localized string similar to Sync done!.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.synchronizedFolders">
            <summary>
              Looks up a localized string similar to Folders are already synchronized..
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.thumbdriveIconPath">
            <summary>
              Looks up a localized string similar to pack://siteoforigin:,,,/Resources/Icons/removabledrive.png.
            </summary>
        </member>
        <member name="P:nsync.Properties.Resources.trackBackToolTip">
            <summary>
              Looks up a localized string similar to TrackBack.
            </summary>
        </member>
        <member name="M:nsync.HelperManager.#ctor(System.Windows.Window)">
            <summary>
            Constructor for HelperManager
            </summary>
            <param name="ownerWindow">Setting the owner of windowHelper to ownerWindow</param>
        </member>
        <member name="M:nsync.HelperManager.Show(System.String,System.Int32,nsync.HelperWindow.windowStartPosition)">
            <summary>
            Tell windowHelper to display the notification
            </summary>
            <param name="helpString">The string to be displayed in the notifiation window</param>
            <param name="time">The duration for which the notification window should be active</param>
            <param name="windowPosition">The position for which the notification window should be placed</param>
        </member>
        <member name="M:nsync.HelperManager.helperWindowIsOn">
            <summary>
            Checks if the notification window should be on/off
            </summary>
            <returns>The result is returned as a boolean</returns>
        </member>
        <member name="M:nsync.HelperManager.CloseWindow">
            <summary>
            Closes the notification window
            </summary>
        </member>
        <member name="M:nsync.HelperManager.UpdateMove">
            <summary>
            Moves the notification window accordingly when its position is changed
            </summary>
        </member>
        <member name="M:nsync.HelperManager.HideWindow">
            <summary>
            Hides the notification window
            </summary>
        </member>
        <member name="M:nsync.Intelligence.IsFolderExists(System.String)">
            <summary>
            Checks if the folder path exists
            </summary>
            <param name="folderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path exists</returns>
        </member>
        <member name="M:nsync.Intelligence.IsFoldersSimilar(System.String,System.String)">
            <summary>
            Checks if two folder paths are similar
            </summary>
            <param name="leftFolderPath">This parameter is the folder path to be checked</param>
            <param name="rightFolderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if both folder paths are similar</returns>
        </member>
        <member name="M:nsync.Intelligence.IsFolderSubFolder(System.String,System.String)">
            <summary>
            Checks if a folder is a subfolder of another
            </summary>
            <param name="leftFolderPath">This parameter is the folder path to be checked</param>
            <param name="rightFolderPath">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if a folder is a subfolder of another</returns>
        </member>
        <member name="M:nsync.Intelligence.isSamePath(System.String[],System.String[])">
            <summary>
            Compares the folder paths of the input arrays and determine if they
            have the same path from the root directory.
            </summary>
            <param name="sourceArray">Array of a folder path to be checked</param>
            <param name="destinationArray">Array of a folder path to be checked</param>
            <returns></returns>
        </member>
        <member name="M:nsync.Intelligence.IsRemovableDrive(System.String)">
            <summary>
            Checks if the folder path belongs to a removable drive
            </summary>
            <param name="path">This parameter is the folder path to be checked</param>
            <returns>Returns a boolean which indicates if the folder path belongs to a removable drive</returns>
        </member>
        <member name="T:nsync.HelperWindow">
            <summary>
            Interaction logic for HelperWindow.xaml
            </summary>
            <summary>
            HelperWindow
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.#ctor">
            <summary>
            Constructor for HelperWindow class
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.SetSettings(System.String,System.Int32,nsync.HelperWindow.windowStartPosition)">
            <summary>
            Set the settings for notification window
            </summary>
            <param name="helpText">This is the string to be displayed</param>
            <param name="helpDuration">Duration for which the notification window should be active</param>
            <param name="windowPosition">The position where notification window should be displayed</param>
        </member>
        <member name="M:nsync.HelperWindow.MoveWindow">
            <summary>
            Move the notification window accordingly when its position is changed
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.CloseWindow">
            <summary>
            Close the notification window
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.SetTime">
            <summary>
            Setup the settings for timer of notification window
            </summary>
        </member>
        <member name="M:nsync.HelperWindow.dispatcherTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            This method is called to start the timer and will close the notification window when time is up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.windowHelper_MouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when a right mouse click is done on the notification window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.FormFadeOut_Completed(System.Object,System.EventArgs)">
            <summary>
            This method is called when the notification window has finished fading out
            <para>Notifcation window will be hidden after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.ButtonClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when the close button on the notification window is clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HelperWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:nsync.HelperWindow.WindowActiveState">
            <summary>
            Get the state of the notification window
            </summary>
        </member>
        <member name="T:nsync.HelperWindow.windowStartPosition">
            <summary>
            A list of enumeration of the available positions for notification window
            </summary>
        </member>
        <member name="T:nsync.SingleInstance">
            <summary>
            SingleInstance class adds support for a having Single Instance Applications in WPF
            </summary>
        </member>
        <member name="F:nsync.TestEngine.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:nsync.TestEngine.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:nsync.TestEngine.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.#ctor">
            <summary>
            Constructor for SyncEngine
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.GetFreeDiskSpaceInBytes(System.String)">
            <summary>
            Computes the amount of free disk space
            <para>Units is in bytes</para>
            </summary>
            <param name="drive">This parameter is the drive volume to be checked</param>
            <returns></returns>
        </member>
        <member name="M:nsync.SyncEngine.ConvertBytesToMegabytes(System.UInt64)">
            <summary>
            Converts bytes to megabytes
            </summary>
            <param name="amount">This parameter is the value to be converted</param>
            <returns>Returns a string which contains the converted value</returns>
        </member>
        <member name="M:nsync.SyncEngine.DetectChangesonFileSystemReplica(System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions)">
            <summary>
            Detect the changes done to the folder
            <para>Updates the metadata</para>
            </summary>
            <param name="replicaRootPath">This parameter is the folder path to be checked</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
        </member>
        <member name="M:nsync.SyncEngine.SyncFileSystemReplicasOneWay(System.String,System.String,Microsoft.Synchronization.Files.FileSyncScopeFilter,Microsoft.Synchronization.Files.FileSyncOptions,System.Boolean)">
            <summary>
            Start the synchronization in one direction
            </summary>
            <param name="sourcePath">This parameter holds the source folder path</param>
            <param name="destPath">This parameter holds the destination folder path</param>
            <param name="filter">This parameter is the filter which will be used during synchronization</param>
            <param name="options">This parameter holds the synchronization options</param>
            <param name="isPreview">This parameter is a boolean which indicates if this method should be run in preview mode</param>
            <returns>Returns a boolean to indicate if the the synchronization was successful</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckSpace">
            <summary>
            Checks if there is sufficient disk space for synchronization to be done
            </summary>
            <returns>Returns a boolean of the result</returns>
        </member>
        <member name="M:nsync.SyncEngine.OnItemConflicting(System.Object,Microsoft.Synchronization.ItemConflictingEventArgs)">
            <summary>
            This method is called when there are conflicting items during synchronization
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.OnItemConstraint(System.Object,Microsoft.Synchronization.ItemConstraintEventArgs)">
            <summary>
            This method is called when there are constraint items during synchronization
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.OnAppliedChange(System.Object,Microsoft.Synchronization.Files.AppliedChangeEventArgs)">
            <summary>
            This method is called when changes are done to a file
            <para>Counts the number of changes already done by the sync framework</para>
            <para>Reports the progress percentage to the backgroundWorkerForSync</para>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.OnApplyingChange(System.Object,Microsoft.Synchronization.Files.ApplyingChangeEventArgs)">
            <summary>
            This method is called when changes are going to be done to a file
            <para>Counts the number of changes to be made later during synchronization</para>
            <para>Counts the amount of disk space needed later during synchronization</para>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:nsync.SyncEngine.backgroundWorkerForSync_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForSync is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SyncEngine.backgroundWorkerForPreSync_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method is called when backgroundWorkerForPreSync is called to start working
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.SyncEngine.PreSync">
            <summary>
            Gets backgroundWorkerForPreSync to do presync preparations
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.StartSync">
            <summary>
            Get the real synchronization process to start
            </summary>
        </member>
        <member name="M:nsync.SyncEngine.InternalPreSync">
            <summary>
            Does actual presync preparations
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsync.SyncEngine.InternalStartSync">
            <summary>
            Starts the synchronization job
            </summary>
            <returns>Returns a boolean to indicate if the synchronization was successful</returns>
        </member>
        <member name="M:nsync.SyncEngine.GetPath">
            <summary>
            Gets the stored folder paths in SyncEngine
            </summary>
            <returns>Returns an array of string which contains 2 folder paths</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckSubFolder">
            <summary>
            Asks IntelligentManager to check if a folder is subfolder of another folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsync.SyncEngine.AreFoldersSync">
            <summary>
            Checks if folder paths are already synchronized
            </summary>
            <returns>Return the result which indicates if folder paths are already synchronized</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckFolderExists(System.String)">
            <summary>
            Asks IntelligentManager to check if the left or right folder path exists
            </summary>
            <param name="leftOrRight">This parameter indicates the left or right folder to be checked</param>
            <returns>Returns the result of the check in a boolean</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckSimilarFolder">
            <summary>
            Asks IntelligentManager to check if the two folder paths are similar
            </summary>
            <returns>Returns the result of the check in a boolean</returns>
        </member>
        <member name="M:nsync.SyncEngine.CheckRemovableDrive(System.String)">
            <summary>
            Ask IntelligentManager to check if a folder path is a removable drive
            </summary>
            <param name="path">This parameters indicates the folder path to be checked</param>
            <returns>Returns the result of the check in a boolean</returns>
        </member>
        <member name="P:nsync.SyncEngine.LeftPath">
            <summary>
            Setter and Getter method for left folder path
            </summary>
        </member>
        <member name="P:nsync.SyncEngine.RightPath">
            <summary>
            Setter and Getter method for right folder path
            </summary>
        </member>
        <member name="T:nsync.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:nsync.MainWindow.#ctor">
            <summary>
            Constructor for MainWindow class
            </summary>
        </member>
        <member name="M:nsync.MainWindow.titleBar_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the titlebar of MainWindow
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the exit button on MainWindow
            <para>nsync will exit after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonMinimise_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user clicks on the minimize button on MainWindow
            <para>nsync will minimize to taskbar after this</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageSettings_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left dot on MainWindow
            <para>Current page will be switched to SettingsPage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageBackTrack_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the right dot on MainWindow
            <para>Current page will be switched to TrackBackPage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.WindowMain_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer is moved near the sides of MainWindow
            <para>Slider bars will be appear when mouse pointer is near it</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.viewList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This method is called when viewList.SelectedIndex is changed
            <para>The respective page will be loaded</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.UpdateToolTips">
            <summary>
            Updates the tooltips of the slider bars
            </summary>
        </member>
        <member name="M:nsync.MainWindow.RenderBitmap(System.Windows.FrameworkElement)">
            <summary>
            Takes a snapshot of an object element
            </summary>
            <param name="element">This parameter is an object that will be snapshot</param>
            <returns>Returns a bitmap of the snapshot</returns>
        </member>
        <member name="M:nsync.MainWindow.ButtonPageHome_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the center dot on MainWindow
            <para>Current page will be switched to HomePage</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonSideTabLeft_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left sliderbar
            <para>Current page will be switched to the page on the left</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonSideTabRight_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when users click on the left sliderbar
            <para>Current page will be switched to the page on the left</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.ButtonTesting_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user click on the letter 'n' of nsync logo
            <para>The testing window will appear</para>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.TrackBackPage">
            <summary>
            Interaction logic for TrackBackPage.xaml
            </summary>
            <summary>
            TrackBackPage
            </summary>
        </member>
        <member name="M:nsync.TrackBackPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:nsync.Settings.#ctor">
            <summary>
            Constructor of Settings class
            </summary>
        </member>
        <member name="M:nsync.Settings.SetHelperWindowStatus(System.Boolean)">
            <summary>
            Change the status of the HelperWindow which determines if it should appear in nsync
            </summary>
            <param name="status">This parameter is a boolean to indicate if HelperWindow should appear</param>
        </member>
        <member name="M:nsync.Settings.GetHelperWindowStatus">
            <summary>
            Gets the current status of the HelperWindow
            </summary>
            <returns>Returns a boolean which indicates if HelperWindow should appear</returns>
        </member>
        <member name="M:nsync.Settings.LoadFolderPaths">
            <summary>
            Loads the saved folder paths into a list
            </summary>
            <returns>Returns a list of strings which contains the saved folder paths</returns>
        </member>
        <member name="M:nsync.Settings.SaveFolderPaths(System.String,System.String)">
            <summary>
            Saves the current folder paths into settings.xml
            </summary>
            <param name="leftPath">This parameter will be saved into settings.xml</param>
            <param name="rightPath">This parameter will be saved into settings.xml</param>
        </member>
        <member name="M:nsync.Settings.SelectNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets a XMLNode from a XML document
            </summary>
            <param name="doc">This parameter indicates the XMLDocument to be read</param>
            <param name="path">This parameter indicates the tag of the XMLNode to search for</param>
            <returns>Returns a matching XMLNode</returns>
        </member>
        <member name="M:nsync.Settings.CheckSettingsXML(System.Xml.XmlDocument)">
            <summary>
            Checks if a XML document is properly formatted
            </summary>
            <param name="doc">This parameter is the XML document to be checked</param>
            <returns>Returns a boolean to indicate if the XML document is valid</returns>
        </member>
        <member name="M:nsync.Settings.CreateNewSettingsXML">
            <summary>
            Creates a new settings.xml
            </summary>
        </member>
        <member name="P:nsync.Settings.Instance">
            <summary>
            Gets the instance of the Settings object
            </summary>
        </member>
        <member name="T:nsync.HomePage">
            <summary>
            Interaction logic for HomePage.xaml
            </summary>
            <summary>
            HomePage
            </summary>
        </member>
        <member name="M:nsync.HomePage.#ctor">
            <summary>
            Constructor for HomePage class
            </summary>
        </member>
        <member name="M:nsync.HomePage.Page_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method will be called when HomePage is loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.mainWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            This method will be called when the position of mainWindow is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.Page_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when HomePage is unloaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.mainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This method is called when nsync is exited
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag and drop something into the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag and drop something into the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_DragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, something into the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_DragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, something into the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_DragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, and instead drag out of the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_DragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            This method is called when user drag, but did not drop, and instead drag out of the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.LeftIcon_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the left box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.RightIcon_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the right box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters leftbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxLeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves leftbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves rightbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BoxRight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters rightbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer enters right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when the mouse pointer leaves right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRURight_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the right MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.BarMRULeft_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user clicks on the left MRU bar
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ShowRemovableDrives(System.String,System.String)">
            <summary>
            Change the leftbox/rightbox icon if folder path is a removeable drive
            </summary>
            <param name="path"></param>
            <param name="leftOrRight"></param>
        </member>
        <member name="M:nsync.HomePage.FolderCheck">
            <summary>
            Checks if folder paths exist
            </summary>
            <returns>Return a boolean to determine if folder paths exist</returns>
        </member>
        <member name="M:nsync.HomePage.SimilarFolderCheck">
            <summary>
            Checks if folders are similar
            </summary>
            <returns>Return a boolean to determine if folder paths are similar</returns>
        </member>
        <member name="M:nsync.HomePage.SubFolderCheck">
            <summary>
            Checks if one folder is a subfolder of another
            </summary>
            <returns>Return a boolean to determine if one folder is subfolder of another</returns>
        </member>
        <member name="M:nsync.HomePage.ShowSync">
            <summary>
            Checks if the sync button should appear
            </summary>
            <returns>Return a boolean to determine if sync button should appear</returns>
        </member>
        <member name="M:nsync.HomePage.SaveFolderPaths">
            <summary>
            Saves folder paths to settings.xml
            </summary>
        </member>
        <member name="M:nsync.HomePage.ReloadFolderPaths">
            <summary>
            Reload folder paths on MRU list
            </summary>
        </member>
        <member name="M:nsync.HomePage.LoadFolderPaths">
            <summary>
            Load folder paths from settings.xml
            </summary>
        </member>
        <member name="M:nsync.HomePage.ShortenPath(System.String)">
            <summary>
            Shortens folder path for MRU list
            </summary>
            <param name="oldPath">The path that is to be shortened is passed in</param>
            <returns>A string containing the new folder path is returned</returns>
        </member>
        <member name="M:nsync.HomePage.ShortenText(System.String)">
            <summary>
            Shortens folder path for left/right box text
            </summary>
            <param name="oldText">The path that is to be shortened is passed in</param>
            <returns>A string containing the new folder path is returned</returns>
        </member>
        <member name="M:nsync.HomePage.listBoxRight_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer leaves right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxLeft_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer leaves left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxLeft_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer enters left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.listBoxRight_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is called when mouse pointer enters right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ListBoxLeft_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user click on left listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.ListBoxRight_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is called when user click on right listbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.FolderSelect(System.String)">
            <summary>
            Opens the browser dialog for user to choose a folder path
            </summary>
            <param name="originalPath">This parameter provides the starting point for the browser dialog</param>
            <returns>Returns the selected folder path from the browser dialog</returns>
        </member>
        <member name="M:nsync.HomePage.ButtonSync_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is called when user click on the sync button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForSync_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            This method is called when progress percentage has changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.EnableInterface(System.Boolean)">
            <summary>
            Enable or disable the user interface after and during synchronization
            </summary>
            <param name="enableOrDisable">This boolean determines whether to disable or enable the interface</param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForSync_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when when synchronization is completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.backgroundWorkerForPreSync_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            This method is called when presync calculations are completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:nsync.HomePage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:nsync.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:nsync.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:nsync.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
